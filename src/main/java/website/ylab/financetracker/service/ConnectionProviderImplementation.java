package website.ylab.financetracker.service;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 * Provides database connections
 */
@Service
public class ConnectionProviderImplementation implements ConnectionProvider {
    Logger logger = LogManager.getLogger(ConnectionProviderImplementation.class);
    //@Value("${spring.datasource.url:default}")
    private String url="jdbc:postgresql://localhost:5432/ylabft_db";
    //@Value("${spring.datasource.username:default}")
    private String user="ft_admin";
    //@Value("${spring.datasource.password:default}")
    private String password="MyP@ss4DB";
    //@Value("${spring.datasource.schema:default}")
    private String schema="fin_tracker";
    //@Value("${liquibase.changelog:default}")
    private String changelog="db/changelog/db.changelog-master.yml";
    private final String persistenceType = "";

    public ConnectionProviderImplementation() {
        logger.info("DB connection settings: url={}, schema={}, user={}", url, schema, user);
        try {
            Class.forName("org.postgresql.Driver");
            logger.info("DB driver successfully called");
        } catch (ClassNotFoundException e) {
            logger.error("DB driver error");
            throw new RuntimeException(e);
        }
    }

    /**
     * Static method to get connection to Database to run queries
     * @return Connection, generated by DriverManager.getConnection method
     * @throws SQLException as it describe in DriverManager.getConnection method
     */
    @Override
    public Connection getConnection() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    /**
     * Returns schema name from config file
     * @return String schema name
     */
    @Override
    public String getSchema() {
        return schema;
    }

    /**
     * Returns path to master changelog from config file
     * @return String path to master changelog
     */
    @Override
    public String getChangelog() { return changelog; }

    @Override
    public String getPersistenceType() { return persistenceType; }
}