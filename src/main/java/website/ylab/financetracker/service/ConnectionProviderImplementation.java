package website.ylab.financetracker.service;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PropertiesLoaderUtils;
import org.springframework.stereotype.Service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

/**
 * Provides database connections
 */
@Service
public class ConnectionProviderImplementation implements ConnectionProvider {
    Logger logger = LogManager.getLogger(ConnectionProviderImplementation.class);
    @Value("${spring.datasource.url}")
    private String url;
    @Value("${spring.datasource.username}")
    private String user;
    @Value("${spring.datasource.password}")
    private String password;
    @Value("${spring.sql.init.schema-locations}")
    private String schema;

    public ConnectionProviderImplementation() {
        try {
            Class.forName("org.postgresql.Driver");
            logger.info("DB driver successfully called");
        } catch (ClassNotFoundException e) {
            logger.error("DB driver error");
            throw new RuntimeException(e);
        }
    }

    /**
     * Static method to get connection to Database to run queries
     * @return Connection, generated by DriverManager.getConnection method
     * @throws SQLException as it describe in DriverManager.getConnection method
     */
    @Override
    public Connection getConnection() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    /**
     * Returns schema name from config file
     * @return String schema name
     */
    @Override
    public String getSchema() {
        return schema;
    }
}